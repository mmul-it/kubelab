---

- name: Checking active SWAP
  command: swapon -s
  register: active_swap
  changed_when: false

- name: Disabling SWAP since kubernetes can't work with swap enabled
  command: swapoff -a
  when:
    - active_swap.stdout != ""

- name: Disabling SWAP in fstab since kubernetes can't work with swap enabled
  replace:
    path: /etc/fstab
    regexp: '^([^#].* swap .*)$'
    replace: '#\1'

- name: Ensure br_netfilter is enabled
  modprobe:
    name: br_netfilter
    state: present

- name: Persist br_netfilter after reboots
  copy:
    dest: /etc/modules-load.d/br_netfilter.conf
    content: "br_netfilter"

- name: Enable /proc/sys/net/bridge/bridge-nf-call-iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    sysctl_set: yes
    state: present
    reload: yes

- name: Enable /proc/sys/net/ipv4/ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    sysctl_set: yes
    state: present
    reload: yes

- name: "Build hosts file"
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{{ hostvars[item].ansible_default_ipv4.address }} {{ item }}"
    state: present
  with_items: "{{ groups['k8s_nodes'] }}"

- name: Adding EPEL repo
  yum:
    name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
    state: present
  when:
    - k8s_epel_enable|bool

- name: Adding Docker-CE repo
  yum_repository:
    name: docker-ce
    description: Docker-CE
    baseurl: "https://download.docker.com/linux/centos/{{ ansible_distribution_major_version }}/$basearch/stable"
    enabled: yes
    gpgcheck: yes
    repo_gpgcheck: yes
    gpgkey: 'https://download.docker.com/linux/centos/gpg'

- name: Adding Docker-CE repo keys
  rpm_key:
    state: present
    key: 'https://download.docker.com/linux/centos/gpg'
  retries: 5
  delay: 5

- name: Adding Kubernetes repo
  yum_repository:
    name: kubernetes
    description: Kubernetes
    baseurl: 'https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64'
    enabled: yes
    gpgcheck: yes
    repo_gpgcheck: yes
    gpgkey:
      - 'https://packages.cloud.google.com/yum/doc/yum-key.gpg'
      - 'https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg'

- name: Adding Kubernetes repo keys
  rpm_key:
    state: present
    key: "{{ item }}"
  with_items:
    - 'https://packages.cloud.google.com/yum/doc/yum-key.gpg'
    - 'https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg'
  retries: 5
  delay: 5

- name: Installing required packages
  yum:
   name: "{{ k8s_packages }}"
   state: present

- name: Remove 'cri' from disabled plugins in /etc/containerd/config.toml
  replace:
    path: /etc/containerd/config.toml
    regexp: '^disabled_plugins(.*)'
    replace: '#disabled_plugins\1'
  when:
    - k8s_container_service == 'containerd'
  notify:
    - restart containerd daemon

- name: Starting and Enabling the required services
  service:
   name: "{{ item }}"
   state: started
   enabled: yes
   masked: no
  with_items:
    - "{{ k8s_services }}"

- name: Set Docker's daemon.json extra options
  template:
    dest: /etc/docker/daemon.json
    src: docker_daemon.json.j2
  when:
    - k8s_container_service == 'docker'
    - k8s_docker_daemon_options is defined
  notify: restart docker daemon

- block:
    - name: Installing required packages
      yum:
       name: firewalld
       state: present

    - name: Starting and Enabling the firewalld service
      service:
       name: firewalld
       state: started
       enabled: yes
       masked: no

    - name: Allow masquerade in Firewalld
      firewalld:
        masquerade: yes
        state: enabled
        permanent: yes
        immediate: yes

    - name: Enable VRRP protocol for multi master setup
      firewalld:
        rich_rule: rule protocol value="vrrp" accept
        state: enabled
        permanent: yes
        immediate: yes
      when:
        - k8s_role is defined
        - k8s_role == 'master'
        - k8s_multi_master | bool

    - name: Allow master node network ports in Firewalld
      firewalld:
       port: "{{ item }}"
       state: enabled
       permanent: yes
       immediate: yes
      with_items:
        - "{{ k8s_master_ports }}"
      when:
        - k8s_role is defined
        - k8s_role == 'master'

    - name: Allow worker node network ports in Firewalld
      firewalld:
       port: "{{ item }}"
       state: enabled
       permanent: yes
       immediate: yes
      with_items:
        - "{{ k8s_worker_ports }}"
      when:
        - k8s_role is defined
        - k8s_role == 'worker'

    - name: Allow NodePort network ports in Firewalld
      firewalld:
       port: "{{ item }}"
       state: enabled
       permanent: yes
       immediate: yes
      with_items:
        - "{{ k8s_nodeport_ports }}"
      when:
        - k8s_role is defined
        - k8s_role == 'worker' or (run_non_infra_pods is defined and run_non_infra_pods|bool)

    - name: Allow network addon ports
      firewalld:
       port: "{{ item }}"
       state: enabled
       permanent: yes
       immediate: yes
      with_items:
        - "{{ k8s_network_addon_ports }}"
      when:
        - k8s_role is defined

    - name: Enable IPIP protocol when using Calico
      firewalld:
        rich_rule: rule protocol value="ipip" accept
        state: enabled
        permanent: yes
        immediate: yes
      when:
        - k8s_network_addon == 'calico'

    - name: Allow MetalLB ports in Firewalld
      firewalld:
       port: "{{ item }}"
       state: enabled
       permanent: yes
       immediate: yes
      with_items:
        - "{{ k8s_metallb_ports }}"
      when:
        - k8s_metallb_enable|bool
  when:
    - k8s_firewalld_enable|bool

- name: Flush handlers
  meta: flush_handlers
