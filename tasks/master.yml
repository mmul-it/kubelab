---

- name: Reset Kubernetes master node
  ansible.builtin.command: kubeadm reset -f
  args:
    removes: '/etc/kubernetes/manifests/*'
  when:
    - k8s_reset | bool
  become: true

- name: Check node status
  ansible.builtin.import_tasks: node_status.yml

- name: Set control plane endpoint for single node
  ansible.builtin.set_fact:
    k8s_control_plane_endpoint: "{{ hostvars[k8s_master_node]['ansible_default_ipv4']['address'] }}"
  when: not k8s_multi_master | bool

- name: Set control plane endpoint for multi master
  ansible.builtin.set_fact:
    k8s_control_plane_endpoint: "{{ k8s_balancer_VIP }}:{{ k8s_balancer_port }}"
  when: k8s_multi_master | bool

- name: Multi master directories and files
  block:
    - name: Directories
      ansible.builtin.file:
        path: "/usr/local/etc/{{ item }}"
        state: directory
        mode: '0750'
      with_items:
        - haproxy
        - keepalived

    - name: Create haproxy.cfg file
      ansible.builtin.template:
        src: multi-master/haproxy.cfg.j2
        dest: /usr/local/etc/haproxy/haproxy.cfg
        owner: root
        group: root
        mode: '0644'

    - name: Create keepalived.conf file
      ansible.builtin.template:
        src: multi-master/keepalived.conf.j2
        dest: /usr/local/etc/keepalived/keepalived.conf
        owner: root
        group: root
        mode: '0644'

    - name: Create pod configurations"
      ansible.builtin.template:
        src: "templates/multi-master/{{ item }}_pod.yaml.j2"
        dest: "/etc/kubernetes/manifests/{{ item }}.yaml"
        owner: root
        group: root
        mode: '0644'
      with_items:
        - haproxy
        - keepalived

    - name: Create keepalived check script
      ansible.builtin.template:
        src: multi-master/check_apiserver.sh.j2
        dest: /usr/local/etc/keepalived/check_apiserver.sh
        owner: root
        group: root
        mode: '0755'
  become: true
  when:
    - k8s_multi_master | bool

- name: Set up the master node
  block:
    - name: Pulling images required for setting up a Kubernetes cluster
      ansible.builtin.command: kubeadm config images pull
      changed_when: true

    - name: Create config.yaml template
      ansible.builtin.template:
        src: config.yaml.j2
        dest: /etc/kubernetes/config.yaml
        mode: '0640'

    - name: Initialize Kubernetes cluster
      ansible.builtin.command: |
        kubeadm init \
        --config=/etc/kubernetes/config.yaml \
        --upload-certs
      changed_when: true
  become: true
  when:
    - k8s_node_status == "NotAvailable"
    - inventory_hostname == k8s_master_node

- name: Copy remote /etc/kubernetes/admin.conf on local directory
  ansible.builtin.fetch:
    src: '/etc/kubernetes/admin.conf'
    dest: "{{ k8s_local_workdir }}/"
    flat: true
    mode: '0640'
  become: true
  when:
    - inventory_hostname == k8s_master_node

- name: Create Network Add-on local folder
  ansible.builtin.file:
    path: "{{ k8s_local_workdir }}/network-addons"
    state: directory
    mode: '0750'
  run_once: true
  delegate_to: localhost

- name: Create Network Add-on resource
  ansible.builtin.include_tasks: create-resource-from-template.yml
  with_items:
    # Network Add-on deployment
    - name: "network-addons/{{ k8s_network_addon }}"
  run_once: true

- name: Set kubeadm join credentials from master node
  block:
    - name: Get Token from Kubernetes
      ansible.builtin.shell: |
        set -o pipefail
        if [ !$(kubeadm token list) ]; then kubeadm token create ; fi
        kubeadm token list | grep 'system:bootstrappers:kubeadm' | awk '{print $1}'
      args:
        executable: /bin/bash
      register: k8s_token_output
      changed_when: false
      become: true

    - name: Set fact k8s_token_output
      ansible.builtin.set_fact:
        k8s_token: "{{ k8s_token_output.stdout }}"

    - name: Get SHA256 Discovery Token CA Cert Hash from Kubernetes
      ansible.builtin.shell: |
        set -o pipefail
        openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | \
        openssl rsa -pubin -outform der 2>/dev/null | \
        openssl dgst -sha256 -hex | \
        sed 's/^.* //'
      register: k8s_discovery_token_ca_cert_hash_output
      changed_when: false
      become: true

    - name: Set fact k8s_discovery_token_ca_cert_hash
      ansible.builtin.set_fact:
        k8s_discovery_token_ca_cert_hash: "{{ k8s_discovery_token_ca_cert_hash_output.stdout }}"
  when:
    - inventory_hostname == k8s_master_node

- name: Join control-plane nodes with kubernetes master
  ansible.builtin.command: |
    kubeadm join {{ k8s_control_plane_endpoint }} \
    --token {{ hostvars[k8s_master_node]['k8s_token'] }} \
    --discovery-token-ca-cert-hash sha256:{{ hostvars[k8s_master_node]['k8s_discovery_token_ca_cert_hash'] }} \
    --control-plane \
    --certificate-key {{ k8s_master_cert_key }}
  args:
    creates: /etc/kubernetes/kubelet.conf
  throttle: 1
  become: true
  when:
    - k8s_node_status != 'Ready'
    - inventory_hostname != k8s_master_node

- name: Enable master to run non infrastructure pods
  kubernetes.core.k8s_taint:
    kubeconfig: "{{ k8s_kubeconfig }}"
    name: "{{ inventory_hostname }}"
    state: absent
    taints:
      - effect: NoSchedule
        key: "node-role.kubernetes.io/control-plane"
  when:
    - run_non_infra_pods is defined
    - run_non_infra_pods|bool
  delegate_to: localhost
