---

- block:
    - name: Reset Kubernetes local folder
      local_action:
        module: ansible.builtin.file
        path: "{{ k8s_local_workdir }}"
        state: absent
      when:
        - k8s_reset|bool
    
    - name: Create Kubernetes local folder
      local_action:
        module: ansible.builtin.file
        path: "{{ k8s_local_workdir }}"
        state: directory

    - name: Set k8s_kubeconfig fact
      set_fact:
        k8s_kubeconfig: "{{ k8s_local_workdir }}/admin.conf"
  run_once: true

- name: Reset Kubernetes master node
  command: kubeadm reset -f
  when:
    - k8s_reset|bool
  become: true

- import_tasks: node_status.yml

- name: Set control plane endpoint for single node
  set_fact:
    k8s_control_plane_endpoint: "{{ hostvars[k8s_master_node]['ansible_default_ipv4']['address'] }}"
  when: not k8s_multi_master | bool

- name: Set control plane endpoint for multi master
  set_fact:
    k8s_control_plane_endpoint: "{{ k8s_balancer_VIP }}:{{ k8s_balancer_port }}"
  when: k8s_multi_master | bool

- name: Multi master directories and files
  block:
    - name: Directories
      file:
        path: "/usr/local/etc/{{ item }}"
        state: directory
      with_items:
        - haproxy
        - keepalived

    - name: Create haproxy.cfg file
      template:
        src: haproxy.cfg.j2
        dest: /usr/local/etc/haproxy/haproxy.cfg
        owner: root
        group: root
        mode: 0644

    - name: Create keepalived.conf file
      template:
        src: keepalived.conf.j2
        dest: /usr/local/etc/keepalived/keepalived.conf
        owner: root
        group: root
        mode: 0644

    - name: Create pod configurations"
      template:
        src: "{{ item }}_pod.yaml.j2"
        dest: "/etc/kubernetes/manifests/{{ item }}.yaml"
        owner: root
        group: root
        mode: 0644
      with_items:
        - haproxy
        - keepalived

    - name: Create keepalived check script
      template:
        src: templates/check_apiserver.sh.j2
        dest: /usr/local/etc/keepalived/check_apiserver.sh
        owner: root
        group: root
        mode: 0755
  become: true
  when:
    - k8s_multi_master | bool

- name: Set up the master node
  block:
    - name: Pulling images required for setting up a Kubernetes cluster
      command: kubeadm config images pull

    - name: Initialize Kubernetes cluster
      command: |
        kubeadm init \
        --control-plane-endpoint {{ k8s_control_plane_endpoint }} \
        --apiserver-bind-port {{ k8s_master_port }}
        --pod-network-cidr={{ k8s_network_cidr }} \
        --certificate-key {{ k8s_master_cert_key }} \
        --upload-certs
  become: true
  when:
    - k8s_node_status != "Ready"
    - inventory_hostname == k8s_master_node

- name: Copy remote /etc/kubernetes/admin.conf on local directory
  fetch:
    src: '/etc/kubernetes/admin.conf'
    dest: "{{ k8s_local_workdir }}/"
    flat: yes
  become: true
  when:
    - inventory_hostname == k8s_master_node

- name: Deploy network addon template
  local_action:
    module: template
    src: "templates/network-addons/{{ k8s_network_addon }}.yaml.j2"
    dest:  "{{ k8s_local_workdir }}/{{ k8s_network_addon }}.yaml"
  run_once: true

- name: Install Network Add-on
  local_action:
    module: k8s
    state: present
    src: "{{ k8s_local_workdir }}/{{ k8s_network_addon }}.yaml"
    kubeconfig: "{{ k8s_kubeconfig }}"
  run_once: true

- block:
    - name: Download Kubernetes Dashboard yaml
      local_action:
        module: get_url
        url: "{{ k8s_dashboard_url }}"
        dest: "{{ k8s_local_workdir }}/dashboard.yaml"
        mode: '0664'

    - name: Deploy dashboard templates
      local_action:
        module: copy
        src: "files/{{ item }}"
        dest:  "kubernetes/{{ item }}"
      with_items:
        - "{{ k8s_dashboard_resources }}"

    - name: Create Kubernetes Dashboard resources
      local_action:
        module: kubernetes.core.k8s
        kubeconfig: "{{ k8s_kubeconfig }}"
        state: present
        src: "{{ k8s_local_workdir }}/{{ item }}"
      with_items:
        - "dashboard.yaml"
        - "{{ k8s_dashboard_resources }}"
  run_once: true
  when:
    - k8s_dashboard_deploy|bool

- name: Set kubeadm join credentials from master node
  block:
    - name: Get Token from Kubernetes
      shell: |
        set -o pipefail
        if [ !$(kubeadm token list) ]; then kubeadm token create ; fi
        kubeadm token list | grep 'system:bootstrappers:kubeadm' | awk '{print $1}'
      register: k8s_token_output
      changed_when: false
      become: true

    - name: Set fact k8s_token_output
      set_fact:
        k8s_token: "{{ k8s_token_output.stdout }}"

    - name: Get SHA256 Discovery Token CA Cert Hash from Kubernetes
      shell: |
        openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | \
        openssl rsa -pubin -outform der 2>/dev/null | \
        openssl dgst -sha256 -hex | \
        sed 's/^.* //'
      register: k8s_discovery_token_ca_cert_hash_output
      changed_when: false
      become: true

    - name: Set fact k8s_discovery_token_ca_cert_hash
      set_fact:
        k8s_discovery_token_ca_cert_hash: "{{ k8s_discovery_token_ca_cert_hash_output.stdout }}"
  when:
    - inventory_hostname == k8s_master_node

- name: Join control-plane nodes with kubernetes master
  command: |
    kubeadm join {{ k8s_control_plane_endpoint }} \
    --token {{ hostvars[k8s_master_node]['k8s_token'] }} \
    --discovery-token-ca-cert-hash sha256:{{ hostvars[k8s_master_node]['k8s_discovery_token_ca_cert_hash'] }} \
    --control-plane \
    --certificate-key {{ k8s_master_cert_key }}
  become: true
  when:
    - k8s_node_status != 'Ready'
    - inventory_hostname != k8s_master_node

- name: Enable master to run non infrastructure pods
  local_action:
    module: kubernetes.core.k8s_taint
    kubeconfig: "{{ k8s_kubeconfig }}"
    name: "{{ inventory_hostname }}"
    state: absent
    taints:
      - effect: NoSchedule
        key: "key1"
  when:
    - run_non_infra_pods is defined
    - run_non_infra_pods|bool
