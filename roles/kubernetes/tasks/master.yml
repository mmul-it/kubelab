---

- name: Resetting Kubernetes master node
  command: kubeadm reset -f
  when:
    - k8s_reset|bool
  become: true

- name: Get k8s cluster status
  command: kubectl cluster-info
  register: k8s_cluster_info
  changed_when: false
  failed_when: false

- name: Set control plane endpoint for single node
  set_fact:
    k8s_control_plane_endpoint: "{{ hostvars[k8s_master_node]['ansible_default_ipv4']['address'] }}"
  when: not k8s_multi_master | bool

- name: Set control plane endpoint for multi master
  set_fact:
    k8s_control_plane_endpoint: "{{ k8s_balancer_VIP }}:{{ k8s_balancer_port }}"
  when: k8s_multi_master | bool

- name: Multi master directories and files
  block:
    - name: Directories
      file:
        path: "/usr/local/etc/{{ item }}"
        state: directory
      with_items:
        - haproxy
        - keepalived

    - name: Creating haproxy.cfg file
      template:
        src: haproxy.cfg.j2
        dest: /usr/local/etc/haproxy/haproxy.cfg
        owner: root
        group: root
        mode: 0644

    - name: Creating keepalived.conf file
      template:
        src: keepalived.conf.j2
        dest: /usr/local/etc/keepalived/keepalived.conf
        owner: root
        group: root
        mode: 0644

    - name: Creating pod configurations"
      template:
        src: "{{ item }}_pod.yaml.j2"
        dest: "/etc/kubernetes/manifests/{{ item }}.yaml"
        owner: root
        group: root
        mode: 0644
      with_items:
        - haproxy
        - keepalived

    - name: Creating keepalived check script
      template:
        src: templates/check_apiserver.sh.j2
        dest: /usr/local/etc/keepalived/check_apiserver.sh
        owner: root
        group: root
        mode: 0755
  become: true
  when:
    - k8s_multi_master | bool

- name: Create local directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - .kube
    - kubernetes

- name: Setting up the master node
  block:
    - name: Pulling images required for setting up a Kubernetes cluster
      command: kubeadm config images pull
      become: true

    - name: Initializing Kubernetes cluster
      command: |
        kubeadm init \
        --control-plane-endpoint {{ k8s_control_plane_endpoint }} \
        --apiserver-bind-port {{ k8s_master_port }}
        --pod-network-cidr={{ k8s_network_cidr }} \
        --certificate-key {{ k8s_master_cert_key }} \
        --upload-certs
      become: true

    - name: Copying required files
      copy:
        src: '/etc/kubernetes/admin.conf'
        dest:  "~{{ ansible_user_id }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user_id }}"
      become: true

    - name: Deploying network addon template
      template:
        src: "templates/network-addons/{{ k8s_network_addon }}.yaml.j2"
        dest:  "kubernetes/{{ k8s_network_addon }}.yaml"

    - name: Install Network Add-on
      command: "kubectl apply -f kubernetes/{{ k8s_network_addon }}.yaml"

    - block:
        - name: Deploying dashboard templates
          copy:
            src: "files/{{ item }}"
            dest:  "kubernetes/{{ item }}"
          with_items:
            - "{{ k8s_dashboard_resources }}"

        - name: Creating Kubernetes Dashboard resource from url
          command: "kubectl apply -f {{ k8s_dashboard_url }}"

        - name: Creating Kubernetes Dashboard access resources
          command: "kubectl apply -f kubernetes/{{ item }}"
          with_items:
            - "{{ k8s_dashboard_resources }}"
      when:
        - k8s_dashboard_deploy|bool
  when:
    - k8s_cluster_info.rc != 0
    - inventory_hostname == k8s_master_node

- block:
    - name: Get taints for master node
      shell: |
        set -o pipefail
        kubectl describe node {{ ansible_hostname }} | \
        egrep '^Taints:.*node-role.kubernetes.io/master:NoSchedule'
      register: k8s_master_get_noschedule_taint
      changed_when: false
      failed_when: false

    - name: Enable master to run non infrastructure pods
      command: "kubectl taint nodes {{ ansible_fqdn }} node-role.kubernetes.io/master:NoSchedule-"
      when:
        - k8s_master_get_noschedule_taint.rc == 0
  when:
    - run_non_infra_pods is defined
    - run_non_infra_pods|bool

- name: Set kubeadm join credentials from master node
  block:
    - name: Get Token from Kubernetes
      shell: |
        set -o pipefail
        if [ !$(kubeadm token list) ]; then kubeadm token create ; fi
        kubeadm token list | grep 'system:bootstrappers:kubeadm' | awk '{print $1}'
      register: k8s_token_output
      changed_when: false

    - name: Set fact k8s_token_output
      set_fact:
        k8s_token: "{{ k8s_token_output.stdout }}"

    - name: Get SHA256 Discovery Token CA Cert Hash from Kubernetes
      shell: |
        openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | \
        openssl rsa -pubin -outform der 2>/dev/null | \
        openssl dgst -sha256 -hex | \
        sed 's/^.* //'
      register: k8s_discovery_token_ca_cert_hash_output
      changed_when: false
      become: true

    - name: Set fact k8s_discovery_token_ca_cert_hash
      set_fact:
        k8s_discovery_token_ca_cert_hash: "{{ k8s_discovery_token_ca_cert_hash_output.stdout }}"
  when:
    - inventory_hostname == k8s_master_node

- name: Join other masters
  block:
    - name: "Check node join status"
      command: kubectl get nodes {{ ansible_fqdn }} -o jsonpath='{.status.conditions[?(@.reason == "KubeletReady")].type}'
      register: k8s_node_join_status
      changed_when: false
      failed_when: false
      delegate_to: "{{ k8s_master_node }}"

    - name: Joining control-plane nodes with kubernetes master
      command: |
        kubeadm join {{ k8s_control_plane_endpoint }} \
        --token {{ hostvars[k8s_master_node]['k8s_token'] }} \
        --discovery-token-ca-cert-hash sha256:{{ hostvars[k8s_master_node]['k8s_discovery_token_ca_cert_hash'] }} \
        --control-plane \
        --certificate-key {{ k8s_master_cert_key }}
      become: true
      when:
        - k8s_node_join_status.stdout != "Ready"

    - name: Copying required files
      copy:
        src: '/etc/kubernetes/admin.conf'
        dest:  "~{{ ansible_user_id }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user_id }}"
      become: true
  when:
    - inventory_hostname != k8s_master_node
